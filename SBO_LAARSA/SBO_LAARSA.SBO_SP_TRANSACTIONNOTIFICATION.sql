-- Schema : SBO_LAARSA
-- Proc   : SBO_SP_TRANSACTIONNOTIFICATION
-- Source : 192.168.3.242
-- Note   : do not edit manually. Generated by export script.

CREATE PROCEDURE SBO_SP_TransactionNotification
(
	in object_type nvarchar(30), 				-- SBO Object Type
	in transaction_type nchar(1),			-- [A]dd, [U]pdate, [D]elete, [C]ancel, C[L]ose
	in num_of_cols_in_key int,
	in list_of_key_cols_tab_del nvarchar(255),
	in list_of_cols_val_tab_del nvarchar(255),
	in user_id int --Nuevo parametro en version 10, segun nota 1320484
)
LANGUAGE SQLSCRIPT
AS
-- Return values
error  int;				-- Result (0 for no error)
error_message nvarchar (200); 		-- Error string to be displayed
Err int;
begin

error := 0;
error_message := '';

--------------------------------------------------------------------------------------------------------------------------------
--	ADD	YOUR	CODE	HERE
CALL "M1_TransactionNotification"(:object_type, :transaction_type, :num_of_cols_in_key, :list_of_key_cols_tab_del, :list_of_cols_val_tab_del, error, error_message);

--------------------------------------------------------------------------------------------------------------------------------

/******************** PASAR LUEGO A NUEVA LOGICA *************************/

/* Inicio error 100000131: Validacion para evitar que se borre un borrador creado por el Addon */
Err := 0;
IF ( transaction_type = 'D' AND (object_type ='10000013' OR object_type ='112')) THEN

	SELECT COUNT(*) INTO Err
	FROM "@REN_DRAFT" T0
	WHERE
	T0."Code" =  list_of_cols_val_tab_del;

	IF Err > 0 THEN
		error := 100000131;
		error_message := N'No se puede borrar una factura preliminar creada por el Addon de Renta';
	END IF;
END IF;
/* Fin error 100000131: Validacion para evitar que se borre un borrador creado por el Addon*/


/* Inicio error 100000132: Validacion para evitar que se manipulen los borradores creados por el Addon */
Err := 0;
IF ((:transaction_type='A' OR :transaction_type='U' OR :transaction_type='C' OR :transaction_type='L') AND (object_type ='10000013' OR object_type ='112')) THEN

	SELECT COUNT(*) INTO Err
	FROM "ODRF" T0
	WHERE
	T0."ObjType" = '13'
	AND IFNULL(T0."U_REN_CON",0) != 0
	AND T0."DataSource" = 'O'
	AND IFNULL(T0."U_REN_CTL",'N') = 'O'
	AND T0."DocEntry" = :list_of_cols_val_tab_del ;

	IF Err > 0 THEN
		error := 100000132;
		error_message := N'Para editar este documento preliminar debe ejecutar el Addon de Renta';
	END IF;
END IF;
/* Fin error 100000132: Validacion para evitar que se manipulen los borradores creados por el Addon*/


/* Inicio error 130000001: Validacion para evitar que se creen facturas gestionadas por el Addon sin validador */
Err := 0;
IF ((:transaction_type='A') AND object_type ='13') THEN

	SELECT COUNT(*) INTO Err
	FROM "OINV" T0
	WHERE
	IFNULL(T0."U_REN_CON",0) != 0
	AND IFNULL(T0."U_REN_CTL",'N') = 'N'
	AND T0."DocEntry" = :list_of_cols_val_tab_del ;

	IF Err > 0 THEN
		error := 130000001;
		error_message := N'Para crear una factura debe ejecutar el Addon de Renta';
	END IF;
END IF;
/* Fin error 130000001: Validacion para evitar que se creen facturas gestionadas por el Addon sin validador*/


/* Inicio error 10000001: Validacion para evitar que fecha final de ciclo sea menor que la fecha inicial */
Err := 0;
IF ((:transaction_type='A' OR :transaction_type='U' ) AND object_type ='REN_CICLO') THEN

	SELECT
	COUNT(*) INTO Err
	FROM "@REN_CICLO" T0
	INNER JOIN "@REN_CICLO2" T1 ON T0."DocEntry" = T1."DocEntry"
	WHERE
	IFNULL(T1."U_FinR",'99991231') < IFNULL(T1."U_InicioR",'19000101')
	AND T0."DocEntry" = :list_of_cols_val_tab_del ;

	IF Err > 0 THEN
		error_message := N'La fecha final no puede ser menor a la fecha inicial de renta.';
		error := 10000001;
	END IF;
END IF;
/* Fin error 10000001: : Validacion para evitar que fecha final de ciclo sea menor que la fecha inicial*/



/* Inicio error 10000002: Validacion para evitar que un usuario sin permisos edite o cree gestiones */

Err := 0;
IF ((:transaction_type='A' OR :transaction_type='U' ) AND object_type ='REN_GES') THEN

	SELECT
	IFNULL(SUM("Permiso"),0) INTO Err
	FROM
	(
		SELECT
		CASE WHEN IFNULL(T2."U_Permiso",'') = 'GRED' AND IFNULL(T2."U_Value",'N') = 'Y'
			THEN 1
			ELSE 0
		END "Permiso"
		FROM "@REN_PER" T0
		INNER JOIN "OUSR" T1 ON T0."Code" = T1."USER_CODE"
		INNER JOIN "@REN_PER1" T2 ON T0."Code" = T2."Code"
		WHERE
		T1."USERID" = :user_id
	);

	IF Err = 0 THEN
		error_message := N'Usuario sin permisos para editar o crear gestiones.';
		error := 10000002;
	END IF;
END IF;

/* Fin error 10000002: : Validacion para evitar que un usuario sin permisos edite o cree gestiones*/



/* Inicio error 10000003: Validacion para evitar que fecha del ciclo encabezado sea menor que la fecha actual */
Err := 0;
IF ((:transaction_type='A' ) AND object_type ='REN_CICLO') THEN

	SELECT
	COUNT(*) INTO Err
	FROM "@REN_CICLO" T0
	WHERE
	IFNULL(T0."U_Fecha",'99991231') < IFNULL(CURRENT_DATE,'19000101')
	AND T0."DocEntry" = :list_of_cols_val_tab_del ;

	IF Err > 0 THEN
		error_message := N'La fecha del ciclo no puede ser menor a la fecha actual.';
		error := 10000003;
	END IF;
END IF;
/* Fin error 10000003: : Validacion para evitar que fecha del ciclo encabezado sea menor que la fecha actual*/



/* Inicio error 10000004: Validacion para evitar que se modifique el estatus de un vehiculo que esta en un ciclo actualmente */
Err := 0;
IF ((:transaction_type='A' ) AND object_type ='STA') THEN

	SELECT
	COUNT(*) INTO Err
	FROM "@REN_STATUS" T0
	INNER JOIN
	(
		SELECT T1."U_Vehiculo"
		FROM
		"@REN_CICLO" T0
		INNER JOIN "@REN_CICLO2" T1 ON T0."DocEntry" = T1."DocEntry"
		WHERE
		IFNULL(T1."U_FinR",'') = ''
		AND T0."Canceled" = 'N'
	)J0 ON T0."U_Vehiculo" = J0."U_Vehiculo"
	WHERE
	T0."DocEntry" = :list_of_cols_val_tab_del;

	IF Err > 0 THEN
		error_message := N'No se puede modificar el estatus de un vehiculo que esta en un ciclo actualmente.';
		error := 10000004;
	END IF;
END IF;
/* Fin error 10000004: : Validacion para evitar que se modifique el estatus de un vehiculo que esta en un ciclo actualmente */



/* Inicio error 10000005: Validacion para evitar Combinación de Modelo-Blindaje-Año duplicado. */
Err := 0;
IF ((:transaction_type='A' OR :transaction_type='U' ) AND object_type ='REN_SPRICES') THEN

	SELECT
	COUNT(*) INTO Err
	FROM "@REN_SPRICES" T0
	INNER JOIN "@REN_SPRICES2" T1 ON T0."DocEntry" = T1."DocEntry"
	INNER JOIN "@REN_SPRICES2" T2 ON T1."DocEntry" = T2."DocEntry"
									AND IFNULL(T1."U_MOD",'') = IFNULL(T2."U_MOD",'')
									AND IFNULL(T1."U_BLI",'') = IFNULL(T2."U_BLI",'')
									AND IFNULL(T1."U_YEAR",-1) = IFNULL(T2."U_YEAR",-1)
									AND T1."LineId" != T2."LineId"
	WHERE
	T0."DocEntry" = :list_of_cols_val_tab_del;

	IF Err > 0 THEN
		error_message := N'Combinación de Modelo-Blindaje-Año duplicado.';
		error := 10000005;
	END IF;
END IF;
/* Fin error 10000005:  Validacion para evitar Combinación de Modelo-Blindaje-Año duplicado. */


/* Inicio error 10000006: Validacion para evitar Combinación de Tipo-Blindaje-Año duplicado. */
Err := 0;
IF ((:transaction_type='A' OR :transaction_type='U' ) AND object_type ='REN_SPRICES') THEN

	SELECT
	COUNT(*) INTO Err
	FROM "@REN_SPRICES" T0
	INNER JOIN "@REN_SPRICES3" T1 ON T0."DocEntry" = T1."DocEntry"
	INNER JOIN "@REN_SPRICES3" T2 ON T1."DocEntry" = T2."DocEntry"
									AND IFNULL(T1."U_TIP",'') = IFNULL(T2."U_TIP",'')
									AND IFNULL(T1."U_BLI",'') = IFNULL(T2."U_BLI",'')
									AND IFNULL(T1."U_YEAR",-1) = IFNULL(T2."U_YEAR",-1)
									AND T1."LineId" != T2."LineId"
	WHERE
	T0."DocEntry" = :list_of_cols_val_tab_del;

	IF Err > 0 THEN
		error_message := N'Combinación de Tipo-Blindaje-Año duplicado.';
		error := 10000006;
	END IF;
END IF;
/* Fin error 10000006:  Validacion para evitar Combinación de Tipo-Blindaje-Año duplicado. */



/* Inicio error 10000007: Validacion para evitar Error por intersección de fechas entre registros de precios especiales para un mismo contrato base. */
Err := 0;
IF ((:transaction_type='A' OR :transaction_type='U' ) AND object_type ='REN_SPRICES') THEN

	SELECT
	COUNT(*) INTO Err
	FROM "@REN_SPRICES" T0
	INNER JOIN "@REN_SPRICES" T1 ON T0."U_Base_ContG" = T1."U_Base_ContG" AND T1."Canceled" = 'N' AND T0."DocEntry" != T1."DocEntry"
	WHERE T0."Canceled" = 'N'
	AND
	(
		--Disponibilidad de fechas
	 	(T0."U_FechaIni"  BETWEEN IFNULL(T1."U_FechaIni",'19000101') AND IFNULL(T1."U_FechaFin",'99991231'))
	    OR
	    (T0."U_FechaFin" BETWEEN IFNULL(T1."U_FechaIni",'19000101') AND IFNULL(T1."U_FechaFin",'99991231'))
	    OR
	    (IFNULL(T1."U_FechaIni",'19000101') BETWEEN T0."U_FechaIni" AND T0."U_FechaFin")
	    OR
	    (T0."U_FechaIni" < IFNULL(T1."U_FechaFin",'99991231') AND IFNULL(T0."U_FechaFin",'') = '')
	)
	AND T0."DocEntry" = :list_of_cols_val_tab_del;

	IF Err > 0 THEN
		error_message := N'Error por intersección de fechas entre registros de precios especiales para un mismo contrato base.';
		error := 10000007;
	END IF;
END IF;
/* Fin error 10000007:  Validacion para evitar Error por intersección de fechas entre registros de precios especiales para un mismo contrato base. */





/******************* FIN PASAR LUEGO A NUEVA LOGICA **********************/



/* Inicio error 220000001: Valida que en las lineas se establezcan los dias ETAS en la Orden de compra */
Err := 0;
IF ( (transaction_type = 'A' OR transaction_type = 'U') AND object_type ='22') THEN
	SELECT 	COUNT(*)
	INTO 	Err
	FROM 	"OPOR" T0
			INNER JOIN "POR1" T1 ON T0."DocEntry" = T1."DocEntry"
	WHERE 		T0."DocEntry" =  list_of_cols_val_tab_del
			AND	T0."DocDate" >= '20240718'
			AND IFNULL(T1."U_diasETA",0) = 0;

	IF Err > 0 THEN
		error := 220000001;
		error_message := N'Debe colocar los dias ETA por cada linea de la Orden';
	END IF;
END IF;
/* Finaliza error 220000001: Valida que en las lineas se establezcan los dias ETAS en la Orden de compra */










/************************************* UDO ADDON P2TOBANK ***************************************/


/* Inicio error -900000002: Validacion dos registros con mismo CIF. */
Err := 0;
IF ( (transaction_type = 'A' OR transaction_type = 'U') AND object_type ='P2BANK') THEN
	SELECT COUNT(*) INTO Err
	FROM "@P2BANK" T0
	INNER JOIN "@P2BANK" T1 ON T0."U_CIF" = T1."U_CIF" AND T1."Canceled" = 'N'
	WHERE
	T0."DocEntry" = :list_of_cols_val_tab_del;
	IF Err > 1 THEN
		error := -900000002;
		error_message := N'Ya existe un registro con este codigo de pago.';
	END IF;
END IF;
/* Fin error -900000002: Validacion dos registros con mismo CIF. */


/*********************************** FIN UDO ADDON P2TOBANK *************************************/



--AC--
/* Inicio Validacion de Nota de Crédito Proveedor en ANEXOS / Objeto (19) */


Err := 0;
IF ( (transaction_type = 'A' OR transaction_type = 'U') AND object_type ='19') THEN
	SELECT COUNT(*) INTO Err
	FROM "SBO_LAARSA"."ORPC" T0
		WHERE T0."DocEntry" =  list_of_cols_val_tab_del
		AND IFNULL(T0."AtcEntry",0) = 0
		AND T0."U_TCO" = 'I' ; -- Proveedor Extranjero (Importación)

	IF Err > 0 THEN
		error :=1;
		error_message := N'Para crear Nota de crédito a Proveedor del EXTERIOR, primero debe seleccionar Tipo de compra Importación y Anexar comprobante de transferencia en la Pestaña ANEXOS.';
	END IF;
END IF;
/* Fin Validacion de Nota de crédito a Proveedores del EXTERIOR en ANEXOS */


/******************************* FIN ANEXOS Nota de Crédito PROVEEDORES (19) **********************************/



/* Inicio error 147113002: Validacion de Cuenta,Sucursal y Centros de costo en solicitud de compra */
Err := 0;
IF ( (transaction_type = 'A' OR transaction_type = 'U') AND object_type ='1470000113') THEN
	SELECT COUNT(*) INTO Err
	FROM "SBO_LAARSA"."OPRQ" T0
	INNER JOIN "SBO_LAARSA"."PRQ1" T1 ON T0."DocEntry" = T1."DocEntry"
	WHERE
	T0."DocEntry" =  list_of_cols_val_tab_del
	AND T0."DocType" != 'I'
	AND (IFNULL(T1."OcrCode2",'')='' OR IFNULL(T1."AcctCode",'')='' OR IFNULL(T1."OcrCode",'')='');
	IF Err > 0 THEN
		error := 147113002;
		error_message := N'Debe colocar Cuenta Contable, Sucursal y Centro de costo';
	END IF;
END IF;
/* Fin error 147113002: Validacion de Cuenta,Sucursal y Centros de costo en solicitud de compra */

--error:=1;
--error_message := 'Migración';

-- Select the return values
select :error, :error_message FROM dummy;

end;
